APP_NAME=Laravel
APP_ENV=local
APP_KEY=base64:HTg2j2zj8r72yuVpOsWGFUa0LNqphkIUabVVbkYaZHI=
APP_DEBUG=true
APP_URL=http://localhost

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mongodb
DB_HOST=10.234.0.11
DB_PORT=27017
DB_DATABASE=karvelo
DB_USERNAME=
DB_PASSWORD=

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_HOST=
PUSHER_PORT=443
PUSHER_SCHEME=https
PUSHER_APP_CLUSTER=mt1

VITE_APP_NAME="${APP_NAME}"
VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"





controller

<?php

namespace App\Http\Controllers;
use Illuminate\Support\Facades\DB; // Tambahkan baris ini
use Illuminate\Http\Request;
use MongoDB\BSON\UTCDateTime;



class Monitor extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        $ProductCode = $request->input('ProductCode');  
        $startDate = $request->input('tra1');  
        $endDate =  $request->input('tra2'); 
        
        $startDateUTC = new UTCDateTime(strtotime($startDate) * 1000); // Konversi ke milidetik
        $endDateUTC = new UTCDateTime(strtotime($endDate) * 1000); // Konversi ke milidetik
       
        
        if (!empty($ProductCode && $startDate && $endDate)) 
        {
        $test = DB::connection('mongodb')
            ->collection('VoucherUsages')
            ->raw(fn($collection) => $collection->aggregate([
                // Filter berdasarkan ProductCode dan rentang tanggal
                ['$match' => [
                    'ProductCode' => $ProductCode,
                    'Claimed' => true,
                    'UsedAt' => [
                        '$gte' => $startDateUTC,  // Filter mulai tanggal
                        '$lte' => $endDateUTC     // Filter sampai tanggal
                    ]
                ]],
                // Mengelompokkan berdasarkan ProductCode
                ['$group' => [
                    '_id' => '$ProductCode',               // Kelompokkan berdasarkan ProductCode
                    'Jumlah_P' => ['$sum' => 1],               // Hitung jumlah ProductCode
                    'Cashback' => ['$sum' => '$cashback'],  // Hitung total cashback
                ]],
                // Urutkan berdasarkan ProductCode
                ['$sort' => ['_id' => 1]]
            ]));
        
        } else{
            $test = DB::connection('mongodb')
            ->collection('VoucherUsages')
            ->raw(fn($collection) => $collection->aggregate([
                // Filter berdasarkan ProductCode dan rentang tanggal
                ['$match' => [
                    'Claimed' => true,
                ]],
                // Mengelompokkan berdasarkan ProductCode
                ['$group' => [
                    '_id' => '$ProductCode',               // Kelompokkan berdasarkan ProductCode
                    'Jumlah_P' => ['$sum' => 1],               // Hitung jumlah ProductCode
                    'Cashback' => ['$sum' => '$cashback'],  // Hitung total cashback
                ]],
                // Urutkan berdasarkan ProductCode
                ['$sort' => ['_id' => 1]]
            ]));
        }

        return view('monitor', compact('test'));
    }

    public function show(Request $request,$ProductCode)
    {
        $tra1 = $request->input('tra1');  
        $tra2 = $request->input('tra2');  
        $startDateFormatted = str_replace('-', '', $tra1);  
        $endDateFormatted = str_replace('-', '', $tra2);  
    
       
        if (!empty( $tra1 && $tra2)) {
            $test = DB::connection('mongodb')
            ->collection('VoucherUsages')
            ->where('ProductCode', $ProductCode)  // Case-insensitive match
            ->where('TransactionId', '>=', $startDateFormatted)
            ->where('TransactionId', '<', $endDateFormatted)
            ->where('Claimed',true)
            ->get();


        } else {
            $test = DB::connection('mongodb')
        ->collection('VoucherUsages')
        ->where('ProductCode', $ProductCode)  // Case-insensitive match
        ->where('Claimed',true)
        ->get();

        }
       

        return view('cekMonitor', compact('test'));
    }
    
}
